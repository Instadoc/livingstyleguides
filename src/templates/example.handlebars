{{{or options.doctypeTag "<!doctype html>"}}}
{{{or options.htmlTag "<html>"}}}

	<head>
		{{{options.headHtml}}}

		<style>
			{{#each example.blocks}}
				{{#if (compare language "==" "css")}}
					{{{content}}}
				{{/if}}
			{{/each}}
		</style>

		<style>
			html, body {
				min-height: 0 !important;
				height: auto !important;
			}
		</style>

		<script>
			function getStylemarkBlock(language, defaultIfEmpty) {
				defaultIfEmpty = defaultIfEmpty || '';
				var script = document.querySelector('script[data-language="' + language + '"]');
				return script ? script.innerText : defaultIfEmpty;
			}
		</script>
	</head>

	{{{or options.bodyTag "<body>"}}}

		<main
			role="main"
			id="stylemark-root"
			ng-controller="stylemark-{{doc.slug}}-{{example.name}}"
			style="
				display: block;
				padding: {{renderOptions.padding}};
				width: {{renderOptions.width}};
			"
		>
			{{~#each example.blocks}}
				{{~#if (compare language "==" "html")}}{{{content}}}{{/if~}}
			{{/each~}}
		</main>

		{{{options.bodyHtml}}}

		{{#each example.blocks}}
			<script type="text/x-stylemark" data-language="{{language}}">{{{content}}}</script>
		{{/each}}

		<script>
			eval(getStylemarkBlock('js'));
		</script>

		<script>
			(function(angular) {
				if (!angular) {
					return;
				}

				var application = getStylemarkBlock('angularjs');

				// There is no application to evaluate
				if (!application) {
					return;
				}

				var moduleElem = document.querySelector('[ng-app]');
				var module;

				if (moduleElem) {
					// Uses an existing module
					module = angular.module(moduleElem.getAttribute('ng-app'));
				}
				else {
					// Creates a new module
					module = angular.module('stylemark-{{doc.slug}}-{{example.name}}', []);
				}

				module.controller('stylemark-{{doc.slug}}-{{example.name}}', function($scope) {
					$scope.$eval(application);
				});
			})(window.angular);
		</script>

		<script>
			(function(ReactDOM) {
				if (!ReactDOM) {
					return;
				}

				var Component = eval(getStylemarkBlock('jsx'));

				// There is no Component to render
				if (!Component) {
					return;
				}

				var rootNode = document.getElementById('stylemark-root');
				ReactDOM.render(Component, rootNode);
			})(window.ReactDOM);
		</script>

		<script>
			(function(Ember) {
				if (!Ember) {
					return;
				}

				var hbs = getStylemarkBlock('handlebars') || getStylemarkBlock('hbs');

				// There is no template to render
				if (!hbs) {
					return;
				}

				var render = function() {
					var app = window.{{or options.emberAppName 'noop'}}
					var container = app.__container__;
					var renderer = container.lookup('renderer:-dom');
					var template = Ember.HTMLBars.compile(hbs);

					var context;
					eval('context = ' + getStylemarkBlock('js', '{}'));

					// Credit:
					// http://stackoverflow.com/questions/27950413/render-ember-js-hbs-template-to-a-string#answer-35625858
					var compile = function(container, template, context) {
						return new Ember.RSVP.Promise(function(resolve) {
							Ember.Component.extend(Ember.merge({
								style: 'display:none;',
								layout: template,
								container: container,
								renderer: renderer,

								init: function() {
									this._super.apply(this, arguments);
									Ember.setOwner(this, container);
								},

								didRender: function() {
									var elem = this.$();
									resolve(elem);
									this.destroy();
								}
							}, context))
								.create()
								.append();

						});
					};

					compile(container, template, context).then(function(elem) {
						jQuery('#stylemark-root').append(elem);
					});
				};

				var isReady = function() {
					return window.{{or options.emberAppName 'noop'}}
						&& window.{{or options.emberAppName 'noop'}}.__container__;
				};

				var checkReady = function() {
					if (isReady()) {
						render();
					}
					else {
						setTimeout(checkReady, 20);
					}
				};

				checkReady();

			})(window.Ember);
		</script>

		<script src="_stylemark/js/vendor/iframeResizer.contentWindow.min.js"></script>
	</body>

</html>
